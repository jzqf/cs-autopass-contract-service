<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.qfree.cs.autopass.ws</groupId>
  <artifactId>cs-autopass-contract-service</artifactId>
  <version>1.0.0</version>
  <packaging>war</packaging>
  <name>CS AutoPASS Contract Web Service</name>
  <description>CS AutoPASS SOAP web service for creating and checking contracts associated with OBU IDs and licence plate numbers.</description>
	
	<properties>
		<java-version>1.7</java-version>
		<org.springframework-version>4.0.3.RELEASE</org.springframework-version>
		<org.aspectj-version>1.7.4</org.aspectj-version>
		<org.slf4j-version>1.7.5</org.slf4j-version>
		<logback-version>1.0.13</logback-version>
		<log4j-version>1.2.17</log4j-version>
		<javax.inject-version>1</javax.inject-version>
		<javax.servlet-servlet-api-version>2.5</javax.servlet-servlet-api-version>
		<javax.servlet-jstl-version>1.2</javax.servlet-jstl-version>
		<javax.servlet.jsp-jsp-api-version>2.2</javax.servlet.jsp-jsp-api-version>
		<junit-version>4.11</junit-version>
		<maven-compiler-plugin-version>3.1</maven-compiler-plugin-version>
		<tomcat7-maven-plugin-version>2.2</tomcat7-maven-plugin-version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	
	<dependencies>

		<!-- I manually installed this artifact into my local Maven repository. -->
		<dependency>
			<groupId>com.sybase</groupId>
			<artifactId>jconn</artifactId>
			<version>4.0.0</version>
		</dependency>

		<!-- JAX-WS -->
		<dependency>
			<groupId>com.sun.xml.ws</groupId>
			<artifactId>jaxws-rt</artifactId>
			<version>2.2.8</version>
		</dependency>
		<!-- These dependencies are included in jaxws-rt so they can be omitted here:
		<dependency>
			<groupId>org.glassfish.gmbal</groupId>
			<artifactId>gmbal-api-only</artifactId>
			<version>3.1.0-b001</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.2.7</version>
		</dependency>
		<dependency>
			<groupId>javax.xml.ws</groupId>
			<artifactId>jaxws-api</artifactId>
			<version>2.2.9</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.ws</groupId>
			<artifactId>policy</artifactId>
			<version>2.3.1</version>
		</dependency>
		<dependency>
			<groupId>org.jvnet.staxex</groupId>
			<artifactId>stax-ex</artifactId>
			<version>1.7.6</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.stream.buffer</groupId>
			<artifactId>streambuffer</artifactId>
			<version>1.5.3</version>
		</dependency> -->
		<!-- It looks like this dependency can be removed, at least for Tomcat:
		<dependency>
			<groupId>org.glassfish.external</groupId>
			<artifactId>management-api</artifactId>
			<version>3.1.0-b001</version>
		</dependency> -->
		
		<!-- com.sun.xml.ws.transport.http.servlet.WSSpringServlet -->
		<dependency>
			<groupId>org.jvnet.jax-ws-commons.spring</groupId>
			<artifactId>jaxws-spring</artifactId>
			<version>1.9</version>
		</dependency>
            
		<!-- Spring:
			 The exclusion elements below are to exclude Commons Logging in favor of SLF4j -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<!-- spring-core and spring-beans are dependences of spring-context, so 
			 it should not be necessary to explicitly specify them here.  However,
			 the jax-spring artifact (specified above) depends transitively on:
			 	spring-core 3.2.3.RELEASE 
			 	spring-beans 3.2.3.RELEASE
			 	spring-context 3.2.3.RELEASE
			 	spring-web 3.2.3.RELEASE
			 Therefore, if I do not explicitly add dependencies for these 4 
			 spring artifacts, then version 3.2.3.RELEASE of these artifacts will
			 be implicitly added. If I allow these transitive dependencies, the 
			 application throws exceptions during startup that I do not really 
			 understand. It probably has to do with incompatibilities when 
			 combining v3.2.3.RELEASE with version ${org.springframework-version}
			 of the spring libraries. The only way that I found that I can avoid
			 this situation is to explicitly include these spring dependencies 
			 and specify the appropriate versions I want. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<!-- You can use spring-web or spring-webmvc, but not both.  If you 
			 specify spring-webmvc, then spring-web is implicitly added.
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency> -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
				
		<!-- AspectJ -->
		<!-- <dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency> -->
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<!-- See: http://www.slf4j.org/legacy.html -->
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<!-- Log4j.  The Log4J dependencies are commented out because we use Logback instead (see below) -->
<!-- 		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j-version}</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>
 -->
		<!-- Logback -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-version}</version>
		</dependency>

		<!-- @Inject annotation support -->
		<!-- <dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>${javax.inject-version}</version>
		</dependency> -->

		<!-- Servlet -->
		<!-- <dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${javax.servlet-servlet-api-version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${javax.servlet.jsp-jsp-api-version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${javax.servlet-jstl-version}</version>
		</dependency> -->

		<!-- Test -->
		<!-- <dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-version}</version>
			<scope>test</scope>
		</dependency> -->

	</dependencies>

    <build>
		<!-- "finalName" sets the context root of the deployed web application.
			Otherwise, the web app will be deployed at /<artifactId>-<version> -->
		<finalName>soap</finalName>
        <plugins>

            <!-- I don't see any need for this plugin, which is for generating Eclipse IDE files.
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin> -->

			<!-- The Maven Compiler Plugin is used to compile the sources of your
			     project.  This <plugin> element is used here to set the JVM source
			     and target compliance level, as well as to set other parameters
			     used by this plug-in; otherwise, I don't believe that this <plugin>
			     element needs to be specified here. 
			     See: http://maven.apache.org/plugins/maven-compiler-plugin/, 
			     http://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin-version}</version>
                <configuration>
                    <source>${java-version}</source>
                    <target>${java-version}</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>

			<!-- The Tomcat7 Maven Plugin provides goals so that we can deploy the app  
			     to my local private Tomcat7 instance using "mvn tomcat7:[re]deploy.
			     The <url> element *must* be ".../manager/text", *not* .../manager/html
			     The name "myTomcat" in the <server> element  must match the same name in:
			         /home/jeffreyz/.m2/settings.xml -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${tomcat7-maven-plugin-version}</version>
				<configuration>
					<url>http://localhost:8080/manager/text</url>
					<server>myTomcat</server>
					<path>/${project.build.finalName}</path>
				</configuration>
			</plugin>
            
            <!-- I don't see any need for this plug-in, which is for executing system and Java programs.
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin> -->

        </plugins>
    </build>
</project>